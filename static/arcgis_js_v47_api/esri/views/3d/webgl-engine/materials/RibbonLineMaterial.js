// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.7/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/webgl-engine/materials/RibbonLineMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vsRibbonLine"\x3e\x3c![CDATA[\r\n  $vsprecisionf\r\n\r\n\tuniform mat4 proj;\r\n\tuniform mat4 view;\r\n\tuniform mat4 model;\r\n\r\n\tuniform float extLineWidth;\r\n\tuniform float nearPlane;\r\n\r\n\tattribute vec3 $position;\r\n\tattribute vec2 $uv0;\r\n\tvarying vec2 vtc;\r\n\r\n\tattribute vec4 $color;\r\n\tvarying vec4 vColor;\r\n\r\n\tattribute float size;\r\n\r\n#ifndef WALL\r\n\tuniform float miterLimit;\r\n\tattribute vec3 $auxpos1;\r\n\tattribute vec3 $auxpos2;\r\n#endif\r\n\r\n#ifdef SCREENSCALE\r\n\tuniform vec2 screenSize;\r\n\t$toScreenCoords\r\n#define VECTYPE vec2\r\n#define ZEROVEC vec2(0.0, 0.0)\r\n#define PERPENDICULAR(v) vec2(v.y, -v.x);\r\n#define ISOUTSIDE (left.x * right.y - left.y * right.x)*$uv0.y \x3e 0.0\r\n\r\n#else //ifdef SCREENSCALE\r\n\r\n#define VECTYPE vec3\r\n#define ZEROVEC vec3(0.0, 0.0, 0.0)\r\n// these macros are only valid for "strip" type lines:\r\n#define PERPENDICULAR(v) cross(up/*vec3(0.0, 1.0, 0.0)*/, v)\r\n#define ISOUTSIDE dot(cross(left, right), up/*vec3(0.0, 1.0, 0.0)*/)*$uv0.y \x3c 0.0\r\n\r\n#endif //ifdef SCREENSCALE\r\n\r\n\tfloat interp(float ncp, vec4 a, vec4 b) {\r\n\t\treturn (-ncp - a.z) / (b.z - a.z);\r\n\t}\r\n\r\n#ifdef SCREENSCALE\r\n\r\n  void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next) {\r\n\t\tfloat vnp \x3d nearPlane*0.99;\r\n\r\n\t\t//We have four vertices per point on the line. Start and end vertices\r\n\t\t//are treated differently --\x3e d \x3e 0, d \x3c 0\r\n\t\tfloat d \x3d abs($uv0.y) - 1.1;\r\n\r\n\t\t//current pos behind ncp --\x3e we need to clip\r\n\t\tif(pos.z \x3e -nearPlane) {\r\n\t\t\tif (d \x3c 0.0) {\r\n\t\t\t\t//previous in front of ncp\r\n\t\t\t\tif(prev.z \x3c -nearPlane) {\r\n\t\t\t\t\tpos \x3d mix(prev, pos, interp(vnp, prev, pos));\r\n\t\t\t\t\tnext \x3d pos;\r\n\t\t\t\t} else {\r\n\t\t\t\t  pos \x3d vec4(0, 0, 0, 1);\r\n\t\t\t  }\r\n\t\t\t}\r\n\t\t\t//next in front of ncp\r\n\t\t\tif(d \x3e 0.0) {\r\n\t\t\t\tif(next.z \x3c -nearPlane) {\r\n\t\t\t\t\tpos \x3d mix(pos, next, interp(vnp, pos, next));\r\n\t\t\t\t\tprev \x3d pos;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpos \x3d vec4(0, 0, 0, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\telse {\r\n\t\t\t//current position visible\r\n\t\t\t//previous behind ncp\r\n\t\t\tif (prev.z \x3e -nearPlane) {\r\n\t\t\t\tprev \x3d mix(pos, prev, interp(vnp, pos, prev));\r\n\t\t\t}\r\n\t\t\t//next behind ncp\r\n\t\t\tif (next.z \x3e -nearPlane) {\r\n\t\t\t\tnext \x3d mix(next, pos, interp(vnp, next, pos));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpos\x3d proj * pos;\r\n\t\tpos.xy *\x3d screenSize;\r\n\t\tpos /\x3d pos.w;\r\n\r\n\t\tnext \x3d proj * next;\r\n\t\tnext.xy *\x3d screenSize;\r\n\t\tnext /\x3d next.w;\r\n\r\n\t\tprev \x3d proj * prev;\r\n\t\tprev.xy *\x3d screenSize;\r\n\t\tprev /\x3d prev.w;\r\n  }\r\n\r\n#endif // SCREENSCALE\r\n\r\n\tvoid main(void) {\r\n\r\n\tfloat lineWidth \x3d extLineWidth + $size;\r\n\r\n#ifdef SCREENSCALE\r\n\r\n#if 0\r\n\t\tvec4 pos \x3d toScreenCoords($position.xyz);\r\n\t\tvec2 left \x3d (pos - toScreenCoords($auxpos1)).xy;\r\n\t\tvec2 right \x3d (toScreenCoords($auxpos2) - pos).xy;\r\n#else\r\n\t\tvec4 pos  \x3d view * vec4((model * vec4($position.xyz, 1.0)).xyz, 1.0);\r\n\t\tvec4 prev \x3d view * vec4((model * vec4($auxpos1.xyz, 1.0)).xyz, 1.0);\r\n\t\tvec4 next \x3d view * vec4((model * vec4($auxpos2.xyz, 1.0)).xyz, 1.0);\r\n\r\n\t\tclipAndTransform(pos, prev, next);\r\n\r\n\t\tvec2 left \x3d (pos - prev).xy;\r\n\t\tvec2 right \x3d (next - pos).xy;\r\n#endif\r\n\r\n#else // ifdef SCREENSCALE\r\n\t\tvec4 pos \x3d vec4($position, 1.0);\r\n#ifndef WALL\r\n\t\tvec3 left \x3d $position.xyz - $auxpos1;\r\n\t\tvec3 right \x3d $auxpos2 - $position.xyz;\r\n\t\tvec3 up \x3d normalize($position.xyz);\r\n#endif // ifndef WALL\r\n#endif // ifdef SCREENSCALE\r\n\r\n#ifdef WALL\r\n\t\tfloat displacementLen \x3d lineWidth;\r\n\t\tvec3 displacementDir \x3d normalize($position.xyz);//vec3(0.0, 1.0, 0.0);\r\n#else // ifdef WALL\r\n\r\n\t\tfloat leftLen \x3d length(left);\r\n\t\tleft \x3d (leftLen \x3e 0.001) ? left/leftLen : ZEROVEC;\r\n\r\n\t\tfloat rightLen \x3d length(right);\r\n\t\tright \x3d (rightLen \x3e 0.001) ? right/rightLen : ZEROVEC;\r\n\r\n\t\t// determine if vertex is on the "outside or "inside" of the join\r\n\t\tbool isOutside \x3d ISOUTSIDE;\r\n\r\n\t\t// compute miter join position first\r\n\t\tfloat displacementLen \x3d lineWidth;\r\n\t\tVECTYPE displacementDir \x3d normalize(left + right);\r\n\t\tdisplacementDir \x3d PERPENDICULAR(displacementDir);\r\n\t\tif (leftLen \x3e 0.001 \x26\x26 rightLen \x3e 0.001) {\r\n\t\t\tfloat nDotSeg \x3d dot(displacementDir, left);\r\n\t\t\tdisplacementLen /\x3d length(nDotSeg*left - displacementDir);\r\n\r\n\t\t\t// limit displacement of inner vertices\r\n\t\t\tif (!isOutside)\r\n\t\t\t\tdisplacementLen \x3d min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));\r\n\t\t}\r\n\r\n\t\tif (isOutside \x26\x26 (displacementLen \x3e miterLimit*lineWidth)) {\r\n\t\t\t// convert to bevel join if miterLimit is exceeded\r\n\t\t\tif (leftLen \x3c 0.001)\r\n\t\t\t    displacementDir \x3d right;\r\n\t\t\telse if (rightLen \x3c 0.001)\r\n\t\t\t\tdisplacementDir \x3d left;\r\n\t\t\telse\r\n\t\t\t\tdisplacementDir \x3d (abs($uv0.y) - 1.1 \x3c 0.0) ? left : right;\r\n\t\t\tdisplacementDir \x3d normalize(displacementDir);\r\n\t\t\tdisplacementDir \x3d PERPENDICULAR(displacementDir);\r\n\t\t\tdisplacementLen \x3d lineWidth;\r\n\t\t}\r\n\r\n#endif // ifdef WALL\r\n\r\n#ifdef SCREENSCALE\r\n\t\tpos.xy +\x3d displacementDir * floor($uv0.y + 0.5) * displacementLen;\r\n\t\tpos.xy /\x3d screenSize;\r\n#else\r\n\t\tpos.xyz +\x3d displacementDir * floor($uv0.y + 0.5) * displacementLen;\r\n\t\tpos \x3d proj * view * model * pos;\r\n#endif\r\n\r\n\t\tvtc \x3d $uv0;\r\n\t\tvColor \x3d $color * 0.003921568627451; // \x3d 1/255\r\n\t\tgl_Position \x3d pos;\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\r\n\x3csnippet name\x3d"fsRibbonLine"\x3e\x3c![CDATA[\r\n  $fsprecisionf\r\n\r\n\tuniform vec4 eColor;\r\n\tvarying vec4 vColor;\r\n\tvarying vec2 vtc;\r\n\r\n#ifdef STIPPLE\r\n  uniform float stippleLengthDoubleInv;\r\n#endif\r\n\r\n\tvoid main() {\r\n\r\n#ifdef STIPPLE\r\n    if (fract(vtc.x * stippleLengthDoubleInv) \x3e 0.5) {\r\n      discard;\r\n    }\r\n#endif\r\n\r\n    gl_FragColor \x3d eColor * vColor;\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fsRibbonLineHighlight"\x3e\x3c![CDATA[\r\n\t$fsprecisionf\r\n\r\n#ifdef STIPPLE\r\n  uniform float stippleLengthDoubleInv;\r\n#endif\r\n\r\n\tvoid main() {\r\n#ifdef STIPPLE\r\n    if (fract(vtc.x * stippleLengthDoubleInv) \x3e 0.5) {\r\n      discard;\r\n    }\r\n#endif\r\n\r\n\t\tgl_FragColor \x3d vec4(1.0, 1.0, 1.0, 1.0);\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e\r\n'}});
define("require exports ../../../../core/tsSupport/extendsHelper dojo/text!./RibbonLineMaterial.xml ../../../../core/Logger ../lib/ComponentUtils ../lib/DefaultVertexBufferLayouts ../lib/gl-matrix ../lib/GLMaterial ../lib/Material ../lib/RenderSlot ../lib/ShaderVariations ../lib/Util ./internal/MaterialUtil ../../../webgl/Util".split(" "),function(L,ha,F,U,V,W,X,h,M,Y,N,O,m,C,P){var x=m.VertexAttrConstants,Z=V.getLogger("esri.views.3d.webgl-engine.materials.RibbonLineMaterial");L=function(Q){function g(a,
b){b=Q.call(this,b)||this;b.params=C.copyParameters(a,aa);"miter"!==b.params.join&&(b.params.miterLimit=0);b.numVertsAtJoin="wall"===b.params.type?2:4;b.numVertsAtCap=2;b.canBeMerged="screen"===b.params.type&&null==b.params.stippleLength;return b}F(g,Q);g.prototype.setColor=function(a){this.params.color=a;this.notifyDirty("matChanged")};g.prototype.getColor=function(){return this.params.color};g.prototype.dispose=function(){};g.prototype.getParams=function(){return this.params};g.prototype.getParameterValues=
function(){var a=this.params;return{color:a.color,width:a.width,type:a.type,join:a.join,polygonOffset:a.polygonOffset,miterLimit:a.miterLimit,stippleLength:a.stippleLength}};g.prototype.setParameterValues=function(a){for(var b in a)m.assert("type"!==b,"RibbonLineMaterial: type cannot be changed after creation"),m.assert("stippleLength"!==b||null!=a[b]===(null!=this.params[b]),"RibbonLineMaterial: stippleLength on/off cannot be changed after creation"),this.params[b]=a[b];"miter"!==this.params.join&&
(this.params.miterLimit=0);this.notifyDirty("matChanged")};g.prototype.getOutputAmount=function(a){a=(a/2+1-2)*this.numVertsAtJoin+2*this.numVertsAtCap;this.canBeMerged&&(a+=2);return a*P.getStride(R)/4};g.prototype.getInstanceBufferLayout=function(){};g.prototype.getVertexBufferLayout=function(){return"wall"===this.params.type?ba:R};g.prototype.fillInterleaved=function(a,b,f,d,e,c){f=a.vertexAttr[x.POSITION].data;d=a.vertexAttr[x.COLOR]?a.vertexAttr[x.COLOR].data:ca;var h=a.vertexAttr[x.SIZE]?a.vertexAttr[x.SIZE].data:
da;(a=a.indices&&a.indices[x.POSITION])&&a.length!==2*(f.length/3-1)&&console.warn("RibbonLineMaterial does not support indices");"wall"===this.params.type?this.fillWithoutAuxpos(f,b,e,c):this.fillWithAuxpos(f,d,h,b,e,c)};g.prototype.intersect=function(a,b,f,d,e,c,g,y){if(d.isSelection&&!W.isAllHidden(b.componentVisibilities,a.data.componentOffsets))if(m.isTranslationMatrix(f)){b=a.getData();a=b.getVertexAttr()[x.POSITION].data;b=b.getVertexAttr()[x.SIZE];c=d.camera;y=d.point;b=((b&&b.data[0])+this.params.width)/
2+4;h.vec3d.set3(y[0]-b,y[1]+b,0,D[0]);h.vec3d.set3(y[0]+b,y[1]+b,0,D[1]);h.vec3d.set3(y[0]+b,y[1]-b,0,D[2]);h.vec3d.set3(y[0]-b,y[1]-b,0,D[3]);for(var k=0;4>k;k++)c.unprojectPoint(D[k],q[k]);m.point2plane(c.eye,q[0],q[1],H);m.point2plane(c.eye,q[1],q[2],I);m.point2plane(c.eye,q[2],q[3],J);m.point2plane(c.eye,q[3],q[0],K);e=Number.MAX_VALUE;for(k=0;k<a.length-5;k+=3)if(r[0]=a[k]+f[12],r[1]=a[k+1]+f[13],r[2]=a[k+2]+f[14],n[0]=a[k+3]+f[12],n[1]=a[k+4]+f[13],n[2]=a[k+5]+f[14],!(0>m.planeDistance(r,H)&&
0>m.planeDistance(n,H)||0>m.planeDistance(r,I)&&0>m.planeDistance(n,I)||0>m.planeDistance(r,J)&&0>m.planeDistance(n,J)||0>m.planeDistance(r,K)&&0>m.planeDistance(n,K))){c.projectPoint(r,A);c.projectPoint(n,B);if(0>A[2]&&0<B[2]){h.vec3d.subtract(r,n,p);var l=c.frustumPlanes,G=-(h.vec3d.dot(l[4],r)+l[4][3]),l=G/h.vec3d.dot(p,l[4]);h.vec3d.scale(p,l,p);h.vec3d.add(r,p,r);c.projectPoint(r,A)}else if(0<A[2]&&0>B[2])h.vec3d.subtract(n,r,p),l=c.frustumPlanes,G=-(h.vec3d.dot(l[4],n)+l[4][3]),l=G/h.vec3d.dot(p,
l[4]),h.vec3d.scale(p,l,p),h.vec3d.add(n,p,n),c.projectPoint(n,B);else if(0>A[2]&&0>B[2])continue;l=m.pointLineSegmentDistanceSquared2D(A,B,y);l<e&&(e=l,h.vec3d.set(r,S),h.vec3d.set(n,T))}f=d.p0;d=d.p1;e<b*b&&(a=m.lineLineDistanceSquared3D(S,T,f,d,ea),b=Number.MAX_VALUE,a.success&&(h.vec3d.subtract(a.pa,f,E),a=h.vec3d.length(E),h.vec3d.scale(E,1/a),b=a/h.vec3d.dist(f,d)),g(b,E))}else Z.error("intersection assumes a translation-only matrix")};g.prototype.getGLMaterials=function(){return{color:fa,depthShadowMap:void 0,
normal:void 0,depth:void 0,highlight:ga}};g.prototype.getAllTextureIds=function(){return[]};g.prototype.fillWithAuxpos=function(a,b,f,d,e,c){var h=a.length/3,g=a[0],k=a[1],l=a[2],m=0,r=c,n=P.getStride(this.getVertexBufferLayout())/4;this.canBeMerged&&(c+=n);d&&(g=d[0]*g+d[4]*k+d[8]*l+d[12],k=d[1]*g+d[5]*k+d[9]*l+d[13],l=d[2]*g+d[6]*k+d[10]*l+d[14]);var z=g,p=k,q=l,u=a[3],v=a[4],w=a[5];d&&(u=d[0]*u+d[4]*v+d[8]*w+d[12],v=d[1]*u+d[5]*v+d[9]*w+d[13],w=d[2]*u+d[6]*v+d[10]*w+d[14]);for(var t=0;t<h;t++){var x=
3*t;t<h-1&&(u=a[x+3],v=a[x+4],w=a[x+5],d&&(u=d[0]*u+d[4]*v+d[8]*w+d[12],v=d[1]*u+d[5]*v+d[9]*w+d[13],w=d[2]*u+d[6]*v+d[10]*w+d[14]));m+=Math.sqrt((z-g)*(z-g)+(p-k)*(p-k)+(q-l)*(q-l));e[c++]=z;e[c++]=p;e[c++]=q;e[c++]=m;e[c++]=0===t?-1.2:-1;e[c++]=g;e[c++]=k;e[c++]=l;e[c++]=u;e[c++]=v;e[c++]=w;e[c++]=b[0];e[c++]=b[1];e[c++]=b[2];e[c++]=b[3];e[c++]=f[0];e[c++]=z;e[c++]=p;e[c++]=q;e[c++]=m;e[c++]=0===t?1.2:1;e[c++]=g;e[c++]=k;e[c++]=l;e[c++]=u;e[c++]=v;e[c++]=w;e[c++]=b[0];e[c++]=b[1];e[c++]=b[2];e[c++]=
b[3];e[c++]=f[0];0<t&&t<h-1&&(e[c++]=z,e[c++]=p,e[c++]=q,e[c++]=m,e[c++]=-1.2,e[c++]=g,e[c++]=k,e[c++]=l,e[c++]=u,e[c++]=v,e[c++]=w,e[c++]=b[0],e[c++]=b[1],e[c++]=b[2],e[c++]=b[3],e[c++]=f[0],e[c++]=z,e[c++]=p,e[c++]=q,e[c++]=m,e[c++]=1.2,e[c++]=g,e[c++]=k,e[c++]=l,e[c++]=u,e[c++]=v,e[c++]=w,e[c++]=b[0],e[c++]=b[1],e[c++]=b[2],e[c++]=b[3],e[c++]=f[0]);g=z;k=p;l=q;z=u;p=v;q=w}if(this.canBeMerged){for(t=r;t<r+n;t++)e[t]=e[t+n];a=c-n;for(t=0;t<n;t++)e[c++]=e[a++]}};g.prototype.fillWithoutAuxpos=function(a,
b,f,d){for(var e=a.length/3,c=0,g=a[0],h=a[1],k=a[2],l,m,n,p=0;p<e;p++){var q=3*p;l=g;m=h;n=k;g=a[q];h=a[q+1];k=a[q+2];b&&(g=b[0]*g+b[4]*h+b[8]*k+b[12],h=b[1]*g+b[5]*h+b[9]*k+b[13],k=b[2]*g+b[6]*h+b[10]*k+b[14]);c+=Math.sqrt((g-l)*(g-l)+(h-m)*(h-m)+(k-n)*(k-n));f[d++]=g;f[d++]=h;f[d++]=k;f[d++]=c;f[d++]=-1;f[d++]=g;f[d++]=h;f[d++]=k;f[d++]=c;f[d++]=1}};g.loadShaders=function(a,b,f){a._parse(U);var d=function(a){a.addDefine("Screen","SCREENSCALE");a.addDefine("Strip","STRIP");a.addDefine("Wall","WALL");
a.addDefine("Stipple","STIPPLE")},e=new O("ribbon-line",["vsRibbonLine","fsRibbonLine"],null,b,a,f);d(e);b.addShaderVariations("ribbon-line-material-shader-variations",e);a=new O("ribbon-line",["vsRibbonLine","fsRibbonLineHighlight"],null,b,a,f);d(a);b.addShaderVariations("ribbon-line-material-highlight-shader-variations",a)};return g}(Y);var fa=function(h){function g(a,b){var f=h.call(this,a,b)||this;f.params=C.copyParameters(a.getParams());delete f.params.join;f.program=b.getShaderVariationsProgram("ribbon-line-material-shader-variations",
["screen"===f.params.type,"strip"===f.params.type,"wall"===f.params.type,null!=f.params.stippleLength]);return f}F(g,h);g.prototype.updateParameters=function(){var a=this.material.getParams(),b=this.params;b.polygonOffset=a.polygonOffset;b.color=a.color;b.width=a.width;b.miterLimit="miter"===a.join?a.miterLimit:0;b.stippleLength=a.stippleLength};g.prototype.beginSlot=function(a){return a===N.TRANSPARENT_MATERIAL};g.prototype.getProgram=function(){return this.program};g.prototype.bind=function(a,b){var f=
this.program,d=this.params;a.bindProgram(f);f.setUniform4fv("eColor",d.color);f.setUniform1f("miterLimit",d.miterLimit);f.setUniform1f("nearPlane",b.nearFar[0]);"screen"===d.type?(f.setUniform2fv("screenSize",[b.viewport[2],b.viewport[3]]),f.setUniform1f("extLineWidth",d.width*b.pixelRatio)):f.setUniform1f("extLineWidth",d.width);null!=d.stippleLength&&f.setUniform1f("stippleLengthDoubleInv",d.stippleLength?1/(2*d.stippleLength):0);d.polygonOffset&&(a.setPolygonOffsetFillEnabled(!0),a.setPolygonOffset(0,
-4));a.setFaceCullingEnabled(!1);a.setBlendingEnabled(!0);a.setBlendFunctionSeparate(a.gl.SRC_ALPHA,a.gl.ONE_MINUS_SRC_ALPHA,a.gl.ONE,a.gl.ONE_MINUS_SRC_ALPHA);a.setDepthTestEnabled(!0);a.setDepthWriteEnabled(1<=d.color[3])};g.prototype.release=function(a){this.params.polygonOffset&&a.setPolygonOffsetFillEnabled(!1);a.setBlendingEnabled(!1);a.setDepthWriteEnabled(!0)};g.prototype.bindView=function(a,b){C.bindView(b.origin,b.view,this.program)};g.prototype.bindInstance=function(a,b){this.program.setUniformMatrix4fv("model",
b.transformation)};g.prototype.getDrawMode=function(a){return a.gl.TRIANGLE_STRIP};return g}(M),ga=function(h){function g(a,b){var f=h.call(this,a,b)||this;f.params=C.copyParameters(a.getParams());delete f.params.join;f.program=b.getShaderVariationsProgram("ribbon-line-material-highlight-shader-variations",["screen"===f.params.type,"strip"===f.params.type,"wall"===f.params.type,null!=f.params.stippleLength]);return f}F(g,h);g.prototype.updateParameters=function(){var a=this.material.getParams(),b=
this.params;b.polygonOffset=a.polygonOffset;b.color=a.color;b.width=a.width;b.miterLimit="miter"===a.join?a.miterLimit:0;b.stippleLength=a.stippleLength};g.prototype.beginSlot=function(a){return a===N.OPAQUE_MATERIAL};g.prototype.getProgram=function(){return this.program};g.prototype.bind=function(a,b){var f=this.program,d=this.params;a.bindProgram(f);f.setUniform4fv("eColor",d.color);f.setUniform1f("miterLimit",d.miterLimit);f.setUniform1f("nearPlane",b.nearFar[0]);"screen"===d.type?(f.setUniform2fv("screenSize",
[b.viewport[2],b.viewport[3]]),f.setUniform1f("extLineWidth",d.width*b.pixelRatio)):f.setUniform1f("extLineWidth",d.width);null!=d.stippleLength&&f.setUniform1f("stippleLengthDoubleInv",d.stippleLength?1/(2*d.stippleLength):0);d.polygonOffset&&(a.setPolygonOffsetFillEnabled(!0),a.setPolygonOffset(0,-4));a.setFaceCullingEnabled(!1);a.setDepthTestEnabled(!0);a.setDepthWriteEnabled(1<=d.color[3])};g.prototype.release=function(a){this.params.polygonOffset&&a.setPolygonOffsetFillEnabled(!1);a.setDepthWriteEnabled(!0)};
g.prototype.bindView=function(a,b){C.bindView(b.origin,b.view,this.program)};g.prototype.bindInstance=function(a,b){this.program.setUniformMatrix4fv("model",b.transformation)};g.prototype.getDrawMode=function(a){return a.gl.TRIANGLE_STRIP};return g}(M),ca=[255,255,255,255],da=[0,0,0,0],r=h.vec3d.create(),n=h.vec3d.create(),p=h.vec3d.create(),E=h.vec3d.create(),A=h.vec3d.create(),B=h.vec3d.create(),S=h.vec3d.create(),T=h.vec3d.create(),ea={success:!1,dist2:0,pa:h.vec3d.create(),pb:h.vec3d.create()},
D=[h.vec3d.create(),h.vec3d.create(),h.vec3d.create(),h.vec3d.create()],q=[h.vec3d.create(),h.vec3d.create(),h.vec3d.create(),h.vec3d.create()],H=h.vec4d.create(),I=h.vec4d.create(),J=h.vec4d.create(),K=h.vec4d.create(),aa={color:[1,1,1,1],width:0,type:"screen",join:"miter",miterLimit:5,polygonOffset:!1,stippleLength:null},ba=X.Pos3Tex,R=[{name:"position",count:3,type:5126,offset:0,stride:64,normalized:!1},{name:"uv0",count:2,type:5126,offset:12,stride:64,normalized:!1},{name:"auxpos1",count:3,type:5126,
offset:20,stride:64,normalized:!1},{name:"auxpos2",count:3,type:5126,offset:32,stride:64,normalized:!1},{name:"color",count:4,type:5126,offset:44,stride:64,normalized:!1},{name:"size",count:1,type:5126,offset:60,stride:64,normalized:!1}];return L});